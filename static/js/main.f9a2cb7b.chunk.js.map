{"version":3,"sources":["components/nav.module.css","components/menu.module.css","components/modal.module.css","components/enigma.module.css","components/tooltip.module.css","components/encryptedText.module.css","components/Nav.js","components/EncryptedText.js","components/Hover.js","components/Tooltip.js","components/Menu.js","components/IndividualHint.js","components/Modal.js","components/SelectedTextContext.js","components/Hint.js","components/Enigma.js","components/Solved.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","activeStyle","color","fontWeight","nav","className","styles","Nav","exact","to","Link","text","1","2","3","4","5","6","7","8","9","10","encryptedText","selectedText","EncryptedText","defaultProps","Hover","props","mouseOver","setState","hovering","mouseOut","state","onMouseOver","this","onMouseOut","children","React","Component","Tooltip","Container","Menu","onClickHandler","numbersMenu","Array","keys","map","number","prettyNumber","Li","key","Highlight","onClick","evt","IndividualHint","onInputChange","guess","target","value","validation","onSubmit","preventDefault","hint","num","toLowerCase","type","fetch","method","body","JSON","stringify","mode","headers","redirect","then","resp","json","data","catch","err","console","log","input","createRef","current","focus","Fragment","question","ref","onChange","disabled","Modal","show","Backdrop","Close","onClose","size","SelectedTextContext","createContext","Hint","Consumer","Enigma","menuClickHandler","menuNum","openEnigmaLink","window","open","showHint","Provider","SorenBtn","SorenLink","href","download","HintBtn","solved","App","path","component","Solved","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9a2cb7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Link\":\"nav_Link__3wgIB\",\"Nav\":\"nav_Nav__3Nx4E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Li\":\"menu_Li__2wBrj\",\"Menu\":\"menu_Menu__2w_-8\",\"Highlight\":\"menu_Highlight__2Yefb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"modal_Backdrop__BqL4j\",\"Modal\":\"modal_Modal__1ZWId\",\"Close\":\"modal_Close__2DPeg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SorenBtn\":\"enigma_SorenBtn__NtJGL\",\"SorenLink\":\"enigma_SorenLink__2juJu\",\"HintBtn\":\"enigma_HintBtn__1UW33\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"tooltip_Container__3LUtW\",\"Tooltip\":\"tooltip_Tooltip__OYBfV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EncryptedText\":\"encryptedText_EncryptedText__pF3M-\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styles from './nav.module.css';\n\nconst activeStyle = {\n    color: 'black',\n    fontWeight: 'bold'\n};\n\nfunction nav () {\n    return (\n        <nav className={styles.Nav}>\n            <NavLink\n                activeStyle={activeStyle}\n                exact to='/'\n                className={styles.Link}\n            >\n                Hints\n            </NavLink>\n            <NavLink\n                activeStyle={activeStyle}\n                to='/solved'\n                className={styles.Link}\n            >\n                Solved\n                </NavLink>\n        </nav>\n    )\n}\n\nexport default nav;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './encryptedText.module.css';\n\nconst text = {\n    1: 'GQBYA YVYWF VJTIL EAGNE X',\n    2: 'FOLYJ KDGHK RUOKN LUPKV SOLSU OTSWD EXRVV',\n    3: 'MBYGQ FBGNN JFMZY WCQQM BGXNQ SBAUI MUHUJ A',\n    4: 'HKQPF EJBIY DNLUN GXPYP TWBDN IDKXY',\n    5: 'MHUCC WOZWU UVBFU UVKVB',\n    6: 'HGEKZ COXHP ZEKVG R',\n    7: 'EGVYS RIHZD DYDCU RTBYE CEOHY WKEYZ NOECD IZIKQ OZ',\n    8: 'BGMDW XYQYP OFPSY WQCHB',\n    9: 'NYWXJ EVVUU GTNIF LJHDJ AVJLR Z',\n    10: 'STKYR LAWVW SOAQM JASYW BD'\n};\n\nfunction encryptedText ({ selectedText }) {\n    return (\n        <div>\n            <p className={styles.EncryptedText}>\n                {text[selectedText]}\n            </p>\n        </div>\n    )\n}\n\nencryptedText.propTypes = {\n    selectedText: PropTypes.number.isRequired,\n}\n\nencryptedText.defaultProps = {\n    selectedText: 1\n}\n\nexport default encryptedText;\n","import React from 'react'\n\nclass Hover extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            hovering: false\n        }\n    }\n\n    mouseOver = () => {\n        this.setState({\n            hovering: true\n        })\n    }\n\n    mouseOut = () => {\n        this.setState({\n            hovering: false\n        })\n    }\n\n    render() {\n        return (\n            <div\n                onMouseOver={this.mouseOver}\n                onMouseOut={this.mouseOut}\n            >\n                {this.props.children(this.state.hovering)}\n            </div>\n        )\n    }\n}\n\nexport default Hover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './tooltip.module.css';\nimport Hover from './Hover';\n\nfunction Tooltip ({ text, children }) {\n    return (\n        <Hover>\n            {(hovering) => (\n                <div className={styles.Container}>\n                   {hovering === true && <div className={styles.Tooltip}>{text}</div>}\n                   {children}\n               </div>\n            )}\n        </Hover>\n    )\n}\n\nTooltip.propTypes = {\n    text: PropTypes.string.isRequired,\n}\n\nexport default Tooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './menu.module.css';\nimport Tooltip from './Tooltip'\n\nfunction Menu({ onClickHandler, selectedText }) {\n    // Array of 10 values (0 to 9)\n    const numbers = [...Array(10).keys()]\n    const numbersMenu = numbers.map((number) => {\n        const prettyNumber = number + 1;\n        return (\n            <li className={styles.Li} key={number}>\n                <Tooltip text={`Day ${prettyNumber}`}>\n                    <button\n                        className={selectedText === prettyNumber ? styles.Highlight : null}\n                        onClick={(evt) => onClickHandler(prettyNumber, evt)}\n                    >\n                        {prettyNumber}\n                    </button>\n                </Tooltip>\n            </li>\n        )\n    });\n    return (\n        <ul className={styles.Menu}>\n            {numbersMenu}\n        </ul>\n    )\n}\n\nMenu.propTypes = {\n    onClickHandler: PropTypes.func.isRequired\n}\n\nexport default Menu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass IndividualHint extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state =  {\n            validation: '',\n            guess: '',\n        }\n\n        this.input = React.createRef();\n\n    }\n\n    componentDidMount() {\n        const { type } = this.props;\n        if (type === 'who' || type === 'solved') {\n            this.input.current.focus();\n        }\n    }\n\n\n    onInputChange = (evt) => {\n        const guess = evt.target.value;\n\n        this.setState({\n            guess,\n            validation: ''\n        });\n    }\n\n    onSubmit = (evt) => {\n        evt.preventDefault();\n\n        const { guess } = this.state;\n\n        const hint = {\n            num: this.props.selectedText,\n            guess: guess.toLowerCase(),\n            type: this.props.type,\n        };\n        fetch('https://scavenger-hunt-api.herokuapp.com/hint', {\n            method: 'POST',\n            body: JSON.stringify(hint),\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Credentials': true,\n                'Access-Control-Allow-Methods': 'POST, OPTIONS',\n                'Access-Control-Allow-Headers': 'application/json',\n                'Access-Control-Request-Method': 'POST',\n                'Access-Control-Request-Headers': 'Content-Type'\n            },\n            redirect: 'follow',\n         })\n        .then(resp => resp.json())\n        .then(data => {\n            const { validation } = data;\n            this.setState({\n                validation\n            })\n        })\n        .catch(err => console.log('err ', err));\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <label>{this.props.question}</label>\n                <div>\n                    <input\n                        ref={this.input}\n                        onChange={this.onInputChange}\n                        type='text'\n                        value={this.state.guess}\n                        />\n                    <button\n                        type='submit'\n                        disabled={this.state.guess ? false : true}\n                        onClick={this.onSubmit}\n                    >\n                        Submit\n                    </button>\n                </div>\n                {this.state.validation && <p>{this.state.validation}</p>}\n            </React.Fragment>\n        )\n    }\n}\n\nIndividualHint.propTypes = {\n    selectedText: PropTypes.number.isRequired,\n    question: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired\n}\n\nexport default IndividualHint;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FaTimes } from 'react-icons/fa';\nimport styles from './modal.module.css';\n\nclass Modal extends React.Component {\n  render() {\n    // Render nothing if the \"show\" prop is false\n    if(!this.props.show) {\n        return null;\n    }\n\n    return (\n        <div className={styles.Backdrop}>\n            <div className={styles.Modal}>\n                <button\n                    className={styles.Close}\n                    onClick={this.props.onClose}\n                >\n                    <FaTimes size={22} />\n                </button>\n                {this.props.children}\n            </div>\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  show: PropTypes.bool,\n  children: PropTypes.node\n};\n\nexport default Modal;\n","import React from 'react';\n\nconst SelectedTextContext = React.createContext(1);\n\nexport default SelectedTextContext;\n","import React from 'react';\nimport IndividualHint from './IndividualHint';\nimport Modal from './Modal'\nimport SelectedTextContext from './SelectedTextContext';\n\nfunction Hint ({ onClose }) {\n\n    return (\n        <Modal\n            onClose={onClose}\n            show={true}\n        >\n            <SelectedTextContext.Consumer>\n                {( selectedText ) => (\n                    <React.Fragment>\n                        <h2>{`Hint for #${selectedText}`}</h2>\n                        <form>\n                            <IndividualHint\n                                selectedText={selectedText}\n                                question='What/ who is this hint about?'\n                                type='who' />\n                            <IndividualHint\n                                selectedText={selectedText}\n                                question=\"After you've done the action, what does the hint translate to?\"\n                                type='translate' />\n                        </form>\n                    </React.Fragment>\n                )}\n            </SelectedTextContext.Consumer>\n        </Modal>\n    );\n}\n\nexport default Hint;\n","// TOOD\n// organize code better\n// rename encryptedText\n// utils for the actual text\n// propTypes\n// query string\n// 404 page?\n\n\nimport React from 'react';\nimport EncryptedText from './EncryptedText';\nimport Menu from './Menu';\nimport Hint from './Hint';\nimport { FaSmileWink } from 'react-icons/fa';\nimport styles from './enigma.module.css';\nimport SelectedTextContext from './SelectedTextContext'\nimport { Link } from 'react-router-dom';\n\nclass Enigma extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            selectedText: 1,\n            showHint: false\n        }\n    }\n\n    menuClickHandler = (menuNum, evt) => {\n        this.setState({\n            selectedText: menuNum\n        });\n    }\n\n    openEnigmaLink = () => {\n        window.open('https://py-enigma.readthedocs.io/en/latest/guide.html');\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <SelectedTextContext.Provider value={this.state.selectedText}>\n                    <h1 className={styles.SorenBtn} onClick={this.openEnigmaLink}>\n                        <a\n                            className={styles.SorenLink}\n                            href='https://adobs.github.io/scavenger-hunt-2020/key_sheet.txt'\n                            download\n                            target=\"_blank\"\n                        >\n                            Soren's Scavenger Hunt 2020\n                        </a>\n                    </h1>\n                    <Menu onClickHandler={this.menuClickHandler} selectedText={this.state.selectedText}/>\n                    <EncryptedText selectedText={this.state.selectedText} />\n                    {this.state.selectedText !== 0 &&\n                        <button\n                            onClick={() => this.setState({\n                                showHint: true\n                            })}\n                            className={styles.HintBtn}\n                        >\n                        <FaSmileWink size={30} />\n                    </button>\n                    }\n                    {this.state.showHint &&\n                        <Hint\n                            onClose={() => this.setState({showHint: false})}\n                        />\n                    }\n                </SelectedTextContext.Provider>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Enigma;\n","import React from 'react';\nimport IndividualHint from './IndividualHint'\n\nfunction solved () {\n    return (\n        <div>\n            <p>So, you've solved the puzzle?</p>\n            <IndividualHint\n                type='solved'\n                question='What phrase does the entire thing simplify to?'\n                selectedText={1} />\n        </div>\n    )\n}\n\nexport default solved;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Nav from './components/Nav';\nimport Enigma from './components/Enigma';\nimport Solved from './components/Solved';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Router>\n            <Nav />\n            <Route exact path='/' component={Enigma} />\n            <Route path='/solved' component={Solved} />\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}